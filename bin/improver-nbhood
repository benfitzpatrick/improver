#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017-2019 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""Script to run neighbourhood processing."""

from improver.argparser import ArgParser
from improver.constants import DEFAULT_PERCENTILES
from improver.nbhood.nbhood import (
    GeneratePercentilesFromANeighbourhood, NeighbourhoodProcessing)
from improver.nbhood.recursive_filter import RecursiveFilter
from improver.utilities.pad_spatial import remove_cube_halo
from improver.utilities.load import load_cube
from improver.utilities.save import save_netcdf
from improver.wind_calculations.wind_direction import WindDirection


def main():
    """Load in arguments and get going."""
    parser = ArgParser(
        central_arguments=[
            "radius", "radii_lead_times", "halo_radius", "kernel",
            "degrees_as_complex", "sum_or_fraction", "input_mask_file",
            "input_file", "output_file", "recursive_filter", "alpha_x",
            "alpha_y", "iterations"],
        description='Apply variants of neighbourhood processing (spatial '
                    'smoothing) to a file.'
    )
 
    args = parser.parse_args()

    if args.kernel in ["circular", "circular_weighted"]:
        if args.input_mask_filepath is not None:
            parser.wrong_args_error(
                'neighbourhood_shape=circular', 'input_mask_filepath')

        if args.degrees_as_complex:
            parser.error('Cannot process complex numbers with circular '
                         'neighbourhoods')

        if args.apply_recursive_filter:
            parser.error('Recursive filter option is not applicable to '
                         'circular neighbourhoods.')

    if args.degrees_as_complex and args.apply_recursive_filter:
        parser.error('Cannot process complex numbers with recursive '
                     'filter')

    cube = load_cube(args.input_filepath)
    if args.degrees_as_complex:
        # convert cube data into complex numbers
        cube.data = WindDirection.deg_to_complex(cube.data)

    radius = args.radius
    if len(radius) == 1:
        radius = radius[0]
    elif not args.radii_lead_times:
        parser.error('Multiple radii given but no lead times specified')

    if args.input_mask_filepath:
        mask_cube = load_cube(args.input_mask_filepath)
    else:
        mask_cube = None

    result = (
        NeighbourhoodProcessing(
            args.kernel, radius,
            lead_times=args.lead_times,
            sum_or_fraction=args.sum_or_fraction
            ).process(cube, mask_cube=mask_cube))
   
    # If the '--apply-recursive-filter' option has been specified in the
    # input command, pass the neighbourhooded 'result' cube obtained above
    # through the recursive-filter plugin before saving the output.
    # The recursive filter is only applicable to square neighbourhoods.

    if args.apply_recursive_filter:

        alpha_x = None
        alphas_x_cube = None
        alpha_y = None
        alphas_y_cube = None

        if args.alpha_x is not None:
            try:
                alpha_x = float(args.alpha_x)
            except ValueError:
                alphas_x_cube = load_cube(args.alpha_x)

        if args.alpha_y is not None:
            try:
                alpha_y = float(args.alpha_y)
            except ValueError:
                alphas_y_cube = load_cube(args.alpha_y)

        result = RecursiveFilter(
            alpha_x=alpha_x, alpha_y=alpha_y,
            iterations=args.iterations).process(
                result, alphas_x=alphas_x_cube, alphas_y=alphas_y_cube,
                mask_cube=mask_cube)

    if args.degrees_as_complex:
        # convert neighbourhooded cube back to degrees
        result.data = WindDirection.complex_to_deg(result.data)

    if args.halo_radius is not None:
        result = remove_cube_halo(result, args.halo_radius)

    save_netcdf(result, args.output_filepath)


if __name__ == "__main__":
    main()
